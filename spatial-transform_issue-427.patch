diff --git a/OpenEphys.Onix1.Design/SpatialTransformMatrixDialog.cs b/OpenEphys.Onix1.Design/SpatialTransformMatrixDialog.cs
index c5530bf..b0dcef2 100644
--- a/OpenEphys.Onix1.Design/SpatialTransformMatrixDialog.cs
+++ b/OpenEphys.Onix1.Design/SpatialTransformMatrixDialog.cs
@@ -1,11 +1,10 @@
 ﻿using System;
+using System.Drawing;
 using System.Linq;
 using System.Numerics;
-using System.Windows.Forms;
 using System.Reactive.Linq;
+using System.Windows.Forms;
 using Bonsai.Design;
-using System.Collections.Generic;
-using System.Drawing;
 
 namespace OpenEphys.Onix1.Design
 {
@@ -14,58 +13,61 @@ namespace OpenEphys.Onix1.Design
     /// </summary>
     public partial class SpatialTransformMatrixDialog : Form
     {
-        internal SpatialTransformProperties SpatialTransform;
+        internal SpatialTransform3D SpatialTransform;
         const byte NumMeasurements = 100;
         readonly IObservable<TS4231V1PositionDataFrame> PositionDataSource;
         IDisposable richTextBoxStatusUpdateSubscription;
         IDisposable MeasurementCalculationSubscription;
 
-        internal SpatialTransformMatrixDialog(IObservable<TS4231V1PositionDataFrame> dataSource, SpatialTransformProperties transformProperties)
+        internal SpatialTransformMatrixDialog(IObservable<TS4231V1PositionDataFrame> dataSource, SpatialTransform3D transformProperties)
         {
             InitializeComponent();
             SpatialTransform = transformProperties;
             PositionDataSource = dataSource;
 
-            var ts4231TextBoxes = new TextBox[] { 
-                textBoxTS4231Coordinate0, textBoxTS4231Coordinate1, 
-                textBoxTS4231Coordinate2, textBoxTS4231Coordinate3};
-            foreach (var (textBox, v) in Enumerable.Zip(ts4231TextBoxes, SpatialTransform.Pre, (tb, v) => (tb, v)))
-                textBox.Text = checkVector3ForNaN(v) ? "" : $"{v.X}, {v.Y}, {v.Z}";
+            var ts4231TextBoxes = new TextBox[] {
+                textBoxTS4231Coordinate0, textBoxTS4231Coordinate1,
+                textBoxTS4231Coordinate2, textBoxTS4231Coordinate3 };
+            var preTransformCoordinates = SpatialTransform.MatrixToFloatArray(SpatialTransform.A);
+            for (byte i = 0; i < 3; i++)
+                ts4231TextBoxes[i].Text = float.IsNaN(preTransformCoordinates[i * 3]) ? "" :  $"{preTransformCoordinates[i * 3]}, " +
+                                                                                              $"{preTransformCoordinates[i * 3 + 1]}, " +
+                                                                                              $"{preTransformCoordinates[i * 3 + 2]}";
 
             var userTextBoxes = new TextBox[] {
                 textBoxUserCoordinate0X, textBoxUserCoordinate0Y, textBoxUserCoordinate0Z,
                 textBoxUserCoordinate1X, textBoxUserCoordinate1Y, textBoxUserCoordinate1Z,
                 textBoxUserCoordinate2X, textBoxUserCoordinate2Y, textBoxUserCoordinate2Z,
-                textBoxUserCoordinate3X, textBoxUserCoordinate3Y, textBoxUserCoordinate3Z};
-            for (byte i = 0; i < 12; i++)
-            {
-                ref var component = ref GetComponent(ref SpatialTransform.Post[i / 3], i % 3);
-                userTextBoxes[i].Text = float.IsNaN(component) ? "" : component.ToString();
-            }
+                textBoxUserCoordinate3X, textBoxUserCoordinate3Y, textBoxUserCoordinate3Z };
+            var postTransformCoordinates = SpatialTransform.MatrixToFloatArray(SpatialTransform.B);
+            foreach (var (tb, comp) in Enumerable.Zip(userTextBoxes, postTransformCoordinates, (tb, comp) => (tb, comp)))
+                tb.Text = float.IsNaN(comp) ? "" : comp.ToString();
 
-            CalculatePrintMatrix();
+            IndicateSpatialTransformStatus();
         }
 
         private void TextBoxUserCoordinate_TextChanged(object sender, EventArgs e)
         {
             var tag = Convert.ToByte(((TextBox)sender).Tag);
-            ref var coordinateComponent = ref GetComponent(ref SpatialTransform.Post[tag / 3], tag % 3);
-            try { coordinateComponent = float.Parse(((TextBox)sender).Text); }
-            catch { coordinateComponent = float.NaN; }
-            CalculatePrintMatrix();
+            try { SpatialTransform.SetMatrixBElement(float.Parse(((TextBox)sender).Text), tag / 3, tag % 3); }
+            catch { SpatialTransform.SetMatrixBElement(float.NaN, tag / 3, tag % 3); }
+            IndicateSpatialTransformStatus();
         }
 
         private void ButtonMeasure_Click(object sender, EventArgs e)
         {
             TextBox[] ts4231TextBoxes = { textBoxTS4231Coordinate0, textBoxTS4231Coordinate1, textBoxTS4231Coordinate2, textBoxTS4231Coordinate3 };
             var index = Convert.ToByte(((Button)sender).Tag);
+
+            for (byte i = 0; i < 3; i++)
+                SpatialTransform.SetMatrixAElement(float.NaN, index, i);
             ts4231TextBoxes[index].Text = "";
-            SpatialTransform.Pre[index] = new(float.NaN);
+            
             if (((Button)sender).Text == "Measure")
             {
                 richTextBoxStatus.SelectionColor = Color.Blue;
                 richTextBoxStatus.AppendText($"Measurement at coordinate {index} initiated.\n");
-                SpatialTransform.M = null;
+                IndicateSpatialTransformStatus();
                 textBoxSpatialTransformMatrix.Text = "";
                 ((Button)sender).Text = "Cancel";
                 EnableButtons(false, index);
@@ -109,8 +111,12 @@ namespace OpenEphys.Onix1.Design
                         (acc, current) => (acc.Sum + current.Position, acc.Count + 1),
                         acc =>
                         {
-                            SpatialTransform.Pre[index] = acc.Sum / NumMeasurements;
-                            return (Position: SpatialTransform.Pre[index], Valid: acc.Count == NumMeasurements);
+                            var measurement = acc.Sum / NumMeasurements;
+                            SpatialTransform.SetMatrixAElement(measurement.X, index, 0);
+                            SpatialTransform.SetMatrixAElement(measurement.Y, index, 1);
+                            SpatialTransform.SetMatrixAElement(measurement.Z, index, 2);
+                            Console.WriteLine(SpatialTransform.A.ToString());
+                            return (Position: measurement, Valid: acc.Count == NumMeasurements);
                         })
                     .ObserveOn(new ControlScheduler(this))
                     .Subscribe(measurement =>
@@ -119,7 +125,7 @@ namespace OpenEphys.Onix1.Design
                         if (measurement.Valid)
                         {
                             ts4231TextBoxes[index].Text = $"{measurement.Position.X}, {measurement.Position.Y}, {measurement.Position.Z}";
-                            CalculatePrintMatrix();
+                            IndicateSpatialTransformStatus();
                         }
                     });
 
@@ -138,106 +144,69 @@ namespace OpenEphys.Onix1.Design
 
         private void ButtonOK_Click(object sender, EventArgs e)
         {
-            if (SpatialTransform.M.HasValue)
-                DialogResult = DialogResult.OK;
-            else
+            var confirmationMessage = "";
+            var invalidInput = false;
+            if (SpatialTransform.ContainsNaN(SpatialTransform.A) || SpatialTransform.ContainsNaN(SpatialTransform.B))
             {
-                var confirmationMessage = "";
-                var incompleteInput = false;
-                if (SpatialTransform.Post.Any(userCoordinate => checkVector3ForNaN(userCoordinate)))
-                {
-                    incompleteInput = true;
-                    var axes = new char[] { 'X', 'Y', 'Z' };
-                    var coordinates = new byte[] { 0, 1, 2, 3 };
-                    confirmationMessage += "At least one coordinate component is empty or invalid:\n";
-                    for (byte i = 0; i < 12; i++)
-                    {
-                        ref var component = ref GetComponent(ref SpatialTransform.Post[i / 3], i % 3);
-                        if (float.IsNaN(component))
-                            confirmationMessage += $" • Coordinate {coordinates[i / 3]} {axes[i % 3]} component\n";
-                    }
-                    confirmationMessage += "\n";
-                }
-                if (SpatialTransform.Pre.Any(TS4231Coordinate => checkVector3ForNaN(TS4231Coordinate)))
-                {
-                    incompleteInput = true;
-                    confirmationMessage += "At least one coordinate measurement is empty:\n";
-                    foreach (var (i, v) in SpatialTransform.Pre.Select((i, v) => (v, i)))
-                        if (checkVector3ForNaN(v))
-                            confirmationMessage += $" • Coordinate {i}\n";
-                    confirmationMessage += "\n";
-                }
-
-                if (incompleteInput)
-                    confirmationMessage += "They will not be saved and transformed position data won't be properly output.\n\n";
-                else if (!Matrix4x4.Invert(Vector3sToMatrix4x4(SpatialTransform.Post), out _))
-                    confirmationMessage = "The spatial transform matrix is non-invertible. The transformed position data won't be properly output.\n\n";
-
-                confirmationMessage += "Would you like to continue?";
+                confirmationMessage = $"At least one entry in the {Name} is invalid for calculating a proper 3D spatial transform:\n";
+
+                var axes = new char[] { 'X', 'Y', 'Z' };
+                var coordinates = new byte[] { 0, 1, 2, 3 };
+
+                for (byte i = 0; i < 12; i++)
+                    if (float.IsNaN(SpatialTransform.MatrixToFloatArray(SpatialTransform.B)[i]))
+                        confirmationMessage += $" • Component {axes[i % 3]} from user coordinate {coordinates[i / 3]}\n";
 
+                for (byte i = 0; i < 4; i++)
+                    if (float.IsNaN(SpatialTransform.MatrixToFloatArray(SpatialTransform.A)[i * 3]))
+                        confirmationMessage += $" • TS4231 Coordinate {i}\n";
+
+                confirmationMessage += "\nThese invalid entries will not be saved. ";
+                invalidInput = true;
+            }
+            else if (!Matrix4x4.Invert(SpatialTransform.M, out _))
+            { 
+                confirmationMessage = $"The calculated spatial transform matrix is non-invertible\n";
+                invalidInput = true;
+            }
+
+            if (invalidInput)
+            {
+                confirmationMessage += "The transformed position data will be zeros until these entries are fixed.\n\n" +
+                    "Would you like to continue?";
                 if (MessageBox.Show(confirmationMessage, "Confirmation", MessageBoxButtons.YesNo) == DialogResult.Yes)
                     DialogResult = DialogResult.OK;
-            }                
+            }
+            else
+                DialogResult = DialogResult.OK;
         }   
 
-        private readonly Func<Vector3, bool> checkVector3ForNaN = v => new[] { v.X, v.Y, v.Z }.Any(float.IsNaN);
-
         private void EnableButtons(bool enable, byte index)
         {
             var buttons = new Button[] { buttonMeasure0, buttonMeasure1, buttonMeasure2, buttonMeasure3, buttonOK, buttonCancel };
             Array.ForEach(buttons, button => button.Enabled = enable || (Convert.ToByte(button.Tag) == index));
         }
 
-        private void CalculatePrintMatrix()
+        private void IndicateSpatialTransformStatus()
         {
-            SpatialTransform.M = null;
-            if (!SpatialTransform.Post.Any(userCoordinate => checkVector3ForNaN(userCoordinate)) &&
-            !SpatialTransform.Pre.Any(TS4231Coordinate => checkVector3ForNaN(TS4231Coordinate)))
-            {
-                if (Matrix4x4.Invert(Vector3sToMatrix4x4(SpatialTransform.Post), out _))
-                {
-                    var ts4231V1CoordinatesMatrix = Vector3sToMatrix4x4(SpatialTransform.Pre);
-                    var userCoordinatesMatrix = Vector3sToMatrix4x4(SpatialTransform.Post);
-                    Matrix4x4.Invert(ts4231V1CoordinatesMatrix, out var ts4231V1CoordinatesMatrixInverted);
-                    SpatialTransform.M = Matrix4x4.Multiply(ts4231V1CoordinatesMatrixInverted, userCoordinatesMatrix);
-                    toolStripStatusLabel.Image = Properties.Resources.StatusReadyImage;
-                    toolStripStatusLabel.Text = "Spatial transform matrix is calculated.";
-                }
-                else
-                {
-                    toolStripStatusLabel.Image = Properties.Resources.StatusWarningImage;
-                    toolStripStatusLabel.Text = "The resulting spatial transform matrix must be non-invertible.";
-                }
-            }
-            else
+            if (SpatialTransform.ContainsNaN(SpatialTransform.A) || SpatialTransform.ContainsNaN(SpatialTransform.B))
             {
                 toolStripStatusLabel.Image = Properties.Resources.StatusWarningImage;
                 toolStripStatusLabel.Text = "All fields must be properly populated.";
+                textBoxSpatialTransformMatrix.Text = "";
             }
-            if (SpatialTransform.M.HasValue)
-                textBoxSpatialTransformMatrix.Text = SpatialTransform.M.Value.ToString();  
-            else
+            else if (!Matrix4x4.Invert(SpatialTransform.M, out _))
+            {
+                toolStripStatusLabel.Image = Properties.Resources.StatusWarningImage;
+                toolStripStatusLabel.Text = "The calculated spatial transform matrix must be invertible.";
                 textBoxSpatialTransformMatrix.Text = "";
-        }
-
-        private static ref float GetComponent(ref Vector3 v, int index)
-        {
-            switch (index)
+            }
+            else 
             {
-                case 0: return ref v.X;
-                case 1: return ref v.Y;
-                case 2: return ref v.Z;
-                default: throw new IndexOutOfRangeException();
-            };
-        }
-
-        private Matrix4x4 Vector3sToMatrix4x4(IList<Vector3> rows)
-        {
-            return new Matrix4x4(
-                rows[0].X, rows[0].Y, rows[0].Z, 1,
-                rows[1].X, rows[1].Y, rows[1].Z, 1,
-                rows[2].X, rows[2].Y, rows[2].Z, 1,
-                rows[3].X, rows[3].Y, rows[3].Z, 1);
+                toolStripStatusLabel.Image = Properties.Resources.StatusReadyImage;
+                toolStripStatusLabel.Text = "Spatial transform matrix is calculated.";
+                textBoxSpatialTransformMatrix.Text = SpatialTransform.M.ToString();
+            }
         }
     }
 }
diff --git a/OpenEphys.Onix1.Design/SpatialTransformMatrixEditor.cs b/OpenEphys.Onix1.Design/SpatialTransformMatrixEditor.cs
index 66f8bca..6be7ac3 100644
--- a/OpenEphys.Onix1.Design/SpatialTransformMatrixEditor.cs
+++ b/OpenEphys.Onix1.Design/SpatialTransformMatrixEditor.cs
@@ -33,7 +33,7 @@ namespace OpenEphys.Onix1.Design
             {
                 var source = GetDataSource(context, provider);
                 var dataFrames = source.Output.Merge().Select(x => x as TS4231V1PositionDataFrame);
-                using var visualizerDialog = new SpatialTransformMatrixDialog(dataFrames, new SpatialTransformProperties((SpatialTransformProperties)value));
+                using var visualizerDialog = new SpatialTransformMatrixDialog(dataFrames, new SpatialTransform3D((SpatialTransform3D)value));
                 if (!editorState.WorkflowRunning)
                 {
                     throw new InvalidOperationException("Workflow must be running to open this GUI.");
diff --git a/OpenEphys.Onix1/SpatialTransform3D.cs b/OpenEphys.Onix1/SpatialTransform3D.cs
new file mode 100644
index 0000000..4b9c2b8
--- /dev/null
+++ b/OpenEphys.Onix1/SpatialTransform3D.cs
@@ -0,0 +1,122 @@
+﻿using System;
+using System.Linq;
+using System.Numerics;
+using System.Xml.Serialization;
+
+namespace OpenEphys.Onix1
+{
+    /// <summary>
+    /// Data necessary to construct a spatial transform matrix as well as the
+    /// spatial transform matrix itself.
+    /// </summary>
+    public class SpatialTransform3D
+    {
+
+        private Matrix4x4 _a, _b;
+
+        /// <summary>
+        /// The A matrix in A * <see cref="M"/> = <see cref="B"/>. It is
+        /// constructed from a set of four Cartesian coordinates before
+        /// undergoing a spatial transformation.
+        /// </summary>
+        public Matrix4x4 A { get => _a; set { _a = value; UpdateM(); } }
+
+        /// <summary>
+        /// The B matrix in <see cref="A"/> * <see cref="M"/> = B. It is
+        /// constructed from a set of four Cartesian coordinates after
+        /// undergoing a spatial transformation.
+        /// </summary>
+        public Matrix4x4 B { get => _b ; set { _b = value; UpdateM(); } }
+
+        /// <summary>
+        /// The M matrix in <see cref="A"/> * <see cref="B"/> = M. It is the
+        /// spatial transform matrix. It calculated as M = A.inv * B.
+        /// </summary>
+        [XmlIgnore]
+        public Matrix4x4 M { get; private set; }
+
+        /// <summary>
+        /// Initializes a new instance of the <see cref="SpatialTransform3D"/>
+        /// class with default values.
+        /// </summary>
+        public SpatialTransform3D()
+        {
+            A = B = new(float.NaN, float.NaN, float.NaN, 1,
+                        float.NaN, float.NaN, float.NaN, 1,
+                        float.NaN, float.NaN, float.NaN, 1,
+                        float.NaN, float.NaN, float.NaN, 1);
+            M = new(float.NaN, float.NaN, float.NaN, float.NaN,
+                    float.NaN, float.NaN, float.NaN, float.NaN,
+                    float.NaN, float.NaN, float.NaN, float.NaN,
+                    float.NaN, float.NaN, float.NaN, float.NaN);
+        }
+
+        /// <summary>
+        /// Initializes a new instance of the <see cref="SpatialTransform3D"/>
+        /// class as a copy of an existing instance.
+        /// </summary>
+        /// <param name="other">The instance to copy.</param>
+        public SpatialTransform3D(SpatialTransform3D other)
+        {
+            A = other.A;
+            B = other.B;
+        }
+
+        /// <summary>
+        /// Sets a component (X, Y, or Z) in one of the coordinates in
+        /// PreTransformCoordinates.
+        /// </summary>
+        public void SetMatrixAElement(float value, int coordinate, int component) =>
+            SetMatrixElement(ref _a, value, coordinate, component);
+
+        /// <summary>
+        /// Sets a component (X, Y, or Z) in one of the coordinates in
+        /// PostTransformCoordinates.
+        /// </summary>
+        public void SetMatrixBElement(float value, int coordinate, int component) =>
+            SetMatrixElement(ref _b, value, coordinate, component);
+
+        private void SetMatrixElement(ref Matrix4x4 m, float value, int coordinate, int component)
+        {
+            if (coordinate is < 0 or > 3) throw new ArgumentOutOfRangeException(nameof(coordinate) + " must be 0, 1, 2, or 3.");
+            if (component is < 0 or > 2) throw new ArgumentOutOfRangeException(nameof(component) + " must be 0, 1, or 2.");
+
+            switch ((coordinate, component))
+            {
+                case (0, 0): m.M11 = value; break;
+                case (0, 1): m.M12 = value; break;
+                case (0, 2): m.M13 = value; break;
+                case (1, 0): m.M21 = value; break;
+                case (1, 1): m.M22 = value; break;
+                case (1, 2): m.M23 = value; break;
+                case (2, 0): m.M31 = value; break;
+                case (2, 1): m.M32 = value; break;
+                case (2, 2): m.M33 = value; break;
+                case (3, 0): m.M41 = value; break;
+                case (3, 1): m.M42 = value; break;
+                case (3, 2): m.M43 = value; break;
+            }
+            UpdateM();
+        }
+
+        private void UpdateM()
+        {
+            Matrix4x4.Invert(A, out var AInverted);
+            M = Matrix4x4.Multiply(AInverted, B);
+        }
+
+        /// <summary>
+        /// Convert coordinates from matrix to a float array.
+        /// </summary>
+        public float[] MatrixToFloatArray(Matrix4x4 m) => 
+            new float[] { m.M11, m.M12, m.M13,
+                          m.M21, m.M22, m.M23,
+                          m.M31, m.M32, m.M33,
+                          m.M41, m.M42, m.M43 };
+
+        /// <summary>
+        /// Checks if matrix contains one or more NaNs.
+        /// </summary>
+        public bool ContainsNaN(Matrix4x4 m) => MatrixToFloatArray(m).Any(float.IsNaN);
+    }
+}
diff --git a/OpenEphys.Onix1/SpatialTransformProperties.cs b/OpenEphys.Onix1/SpatialTransformProperties.cs
deleted file mode 100644
index f20306b..0000000
--- a/OpenEphys.Onix1/SpatialTransformProperties.cs
+++ /dev/null
@@ -1,58 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Numerics;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace OpenEphys.Onix1
-{
-    /// <summary>
-    /// Data necessary to construct a spatial transform matrix as well as the
-    /// spatial transform matrix itself.
-    /// </summary>
-    public class SpatialTransformProperties
-    {
-        /// <summary>
-        /// The set of coordinates before undergoing a spatial transform.
-        /// </summary>
-        public Vector3[] Pre { get; set; }
-
-        /// <summary>
-        /// The set of coordinates after undergoing a spatial transform.
-        /// </summary>
-        public Vector3[] Post { get; set; }
-
-        /// <summary>
-        /// The spatial transform matrix calculated from <see cref="Pre"/> and
-        /// <see cref="Post"/>.
-        /// </summary>
-        public Matrix4x4? M { get; set; }
-
-        /// <summary>
-        /// Initializes a new instance of the <see
-        /// cref="SpatialTransformProperties"/> class with default values.
-        /// </summary>
-        public SpatialTransformProperties()
-        {
-            Pre = new Vector3[] { new(float.NaN), new(float.NaN), new(float.NaN), new(float.NaN) };
-            Post = new Vector3[] { new(float.NaN), new(float.NaN), new(float.NaN), new(float.NaN) };
-            M = null;
-        }
-
-        /// <summary>
-        /// Initializes a new instance of the <see
-        /// cref="SpatialTransformProperties"/> class as a copy of an existing
-        /// instance.
-        /// </summary>
-        /// <param name="other">The instance to copy.</param>
-        public SpatialTransformProperties(SpatialTransformProperties other)
-        {
-            Pre = new Vector3[4];
-            Post = new Vector3[4];
-            Array.Copy(other.Pre, Pre, 4);
-            Array.Copy(other.Post, Post, 4);
-            M = other.M;
-        }
-    }
-}
diff --git a/OpenEphys.Onix1/TS4231V1SpatialTransform.cs b/OpenEphys.Onix1/TS4231V1SpatialTransform.cs
index 7176f6d..7475130 100644
--- a/OpenEphys.Onix1/TS4231V1SpatialTransform.cs
+++ b/OpenEphys.Onix1/TS4231V1SpatialTransform.cs
@@ -19,7 +19,7 @@ namespace OpenEphys.Onix1
         /// </summary>
         [Editor("OpenEphys.Onix1.Design.SpatialTransformMatrixEditor, OpenEphys.Onix1.Design", DesignTypes.UITypeEditor)]
         [Description("Data for transforming position measurements to another reference frame.")]
-        public SpatialTransformProperties SpatialTransform { get; set; } = new();
+        public SpatialTransform3D SpatialTransform { get; set; } = new();
 
         /// <summary>
         /// Transforms a sequence of <see cref="TS4231V1PositionDataFrame"/>
@@ -34,7 +34,7 @@ namespace OpenEphys.Onix1
         {
             return source.Select(input =>
                 new TS4231V1PositionDataFrame(input.Clock, input.HubClock, input.SensorIndex, 
-                    Vector3.Transform(input.Position, SpatialTransform.M.GetValueOrDefault())));
+                    Vector3.Transform(input.Position, SpatialTransform.M)));
         }
     }
 }
diff --git a/OpenEphys.Onix1/TS4231V1TransformedPositionData.bonsai b/OpenEphys.Onix1/TS4231V1TransformedPositionData.bonsai
index 9a8a7a3..60dd9e2 100644
--- a/OpenEphys.Onix1/TS4231V1TransformedPositionData.bonsai
+++ b/OpenEphys.Onix1/TS4231V1TransformedPositionData.bonsai
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<WorkflowBuilder Version="2.8.5"
+<WorkflowBuilder Version="2.9.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xmlns:onix1="clr-namespace:OpenEphys.Onix1;assembly=OpenEphys.Onix1"
                  xmlns="https://bonsai-rx.org/2018/workflow">
@@ -20,29 +20,6 @@
             <onix1:Y>0</onix1:Y>
             <onix1:Z>0</onix1:Z>
           </onix1:Q>
-          <onix1:M>
-            <onix1:M11>1</onix1:M11>
-            <onix1:M12>0</onix1:M12>
-            <onix1:M13>0</onix1:M13>
-            <onix1:M14>0</onix1:M14>
-            <onix1:M21>0</onix1:M21>
-            <onix1:M22>1</onix1:M22>
-            <onix1:M23>0</onix1:M23>
-            <onix1:M24>0</onix1:M24>
-            <onix1:M31>0</onix1:M31>
-            <onix1:M32>0</onix1:M32>
-            <onix1:M33>1</onix1:M33>
-            <onix1:M34>0</onix1:M34>
-            <onix1:M41>0</onix1:M41>
-            <onix1:M42>0</onix1:M42>
-            <onix1:M43>0</onix1:M43>
-            <onix1:M44>1</onix1:M44>
-            <onix1:Translation>
-              <onix1:X>0</onix1:X>
-              <onix1:Y>0</onix1:Y>
-              <onix1:Z>0</onix1:Z>
-            </onix1:Translation>
-          </onix1:M>
         </Combinator>
       </Expression>
       <Expression xsi:type="ExternalizedMapping">
@@ -50,7 +27,54 @@
       </Expression>
       <Expression xsi:type="Combinator">
         <Combinator xsi:type="onix1:TS4231V1SpatialTransform">
-          <onix1:SpatialTransform />
+          <onix1:SpatialTransform>
+            <onix1:A>
+              <onix1:M11>NaN</onix1:M11>
+              <onix1:M12>NaN</onix1:M12>
+              <onix1:M13>NaN</onix1:M13>
+              <onix1:M14>1</onix1:M14>
+              <onix1:M21>NaN</onix1:M21>
+              <onix1:M22>NaN</onix1:M22>
+              <onix1:M23>NaN</onix1:M23>
+              <onix1:M24>1</onix1:M24>
+              <onix1:M31>NaN</onix1:M31>
+              <onix1:M32>NaN</onix1:M32>
+              <onix1:M33>NaN</onix1:M33>
+              <onix1:M34>1</onix1:M34>
+              <onix1:M41>NaN</onix1:M41>
+              <onix1:M42>NaN</onix1:M42>
+              <onix1:M43>NaN</onix1:M43>
+              <onix1:M44>1</onix1:M44>
+              <onix1:Translation>
+                <onix1:X>NaN</onix1:X>
+                <onix1:Y>NaN</onix1:Y>
+                <onix1:Z>NaN</onix1:Z>
+              </onix1:Translation>
+            </onix1:A>
+            <onix1:B>
+              <onix1:M11>NaN</onix1:M11>
+              <onix1:M12>NaN</onix1:M12>
+              <onix1:M13>NaN</onix1:M13>
+              <onix1:M14>1</onix1:M14>
+              <onix1:M21>NaN</onix1:M21>
+              <onix1:M22>NaN</onix1:M22>
+              <onix1:M23>NaN</onix1:M23>
+              <onix1:M24>1</onix1:M24>
+              <onix1:M31>NaN</onix1:M31>
+              <onix1:M32>NaN</onix1:M32>
+              <onix1:M33>NaN</onix1:M33>
+              <onix1:M34>1</onix1:M34>
+              <onix1:M41>NaN</onix1:M41>
+              <onix1:M42>NaN</onix1:M42>
+              <onix1:M43>NaN</onix1:M43>
+              <onix1:M44>1</onix1:M44>
+              <onix1:Translation>
+                <onix1:X>NaN</onix1:X>
+                <onix1:Y>NaN</onix1:Y>
+                <onix1:Z>NaN</onix1:Z>
+              </onix1:Translation>
+            </onix1:B>
+          </onix1:SpatialTransform>
         </Combinator>
       </Expression>
       <Expression xsi:type="WorkflowOutput" />
